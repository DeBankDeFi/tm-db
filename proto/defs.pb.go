// Code generated by protoc-gen-go. DO NOT EDIT.
// source: defs.proto

package protodb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Operation_Type int32

const (
	Operation_SET    Operation_Type = 0
	Operation_DELETE Operation_Type = 1
)

var Operation_Type_name = map[int32]string{
	0: "SET",
	1: "DELETE",
}

var Operation_Type_value = map[string]int32{
	"SET":    0,
	"DELETE": 1,
}

func (x Operation_Type) String() string {
	return proto.EnumName(Operation_Type_name, int32(x))
}

func (Operation_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bf10f51bd2cb5547, []int{1, 0}
}

type Batch struct {
	Id                   int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ops                  []*Operation `protobuf:"bytes,2,rep,name=ops,proto3" json:"ops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf10f51bd2cb5547, []int{0}
}

func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Batch) GetOps() []*Operation {
	if m != nil {
		return m.Ops
	}
	return nil
}

type Operation struct {
	Entity               *Entity        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Type                 Operation_Type `protobuf:"varint,2,opt,name=type,proto3,enum=protodb.Operation_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf10f51bd2cb5547, []int{1}
}

func (m *Operation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Operation.Unmarshal(m, b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return xxx_messageInfo_Operation.Size(m)
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *Operation) GetType() Operation_Type {
	if m != nil {
		return m.Type
	}
	return Operation_SET
}

type Entity struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Exists               bool     `protobuf:"varint,4,opt,name=exists,proto3" json:"exists,omitempty"`
	Start                []byte   `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
	End                  []byte   `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	Err                  string   `protobuf:"bytes,7,opt,name=err,proto3" json:"err,omitempty"`
	CreatedAt            int64    `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf10f51bd2cb5547, []int{2}
}

func (m *Entity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entity.Unmarshal(m, b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return xxx_messageInfo_Entity.Size(m)
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Entity) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Entity) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Entity) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *Entity) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Entity) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *Entity) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *Entity) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type Nothing struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nothing) Reset()         { *m = Nothing{} }
func (m *Nothing) String() string { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()    {}
func (*Nothing) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf10f51bd2cb5547, []int{3}
}

func (m *Nothing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nothing.Unmarshal(m, b)
}
func (m *Nothing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nothing.Marshal(b, m, deterministic)
}
func (m *Nothing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nothing.Merge(m, src)
}
func (m *Nothing) XXX_Size() int {
	return xxx_messageInfo_Nothing.Size(m)
}
func (m *Nothing) XXX_DiscardUnknown() {
	xxx_messageInfo_Nothing.DiscardUnknown(m)
}

var xxx_messageInfo_Nothing proto.InternalMessageInfo

type Domain struct {
	Start                []byte   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  []byte   `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf10f51bd2cb5547, []int{4}
}

func (m *Domain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Domain.Unmarshal(m, b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return xxx_messageInfo_Domain.Size(m)
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Domain) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

type Iterator struct {
	Domain               *Domain  `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Valid                bool     `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	Key                  []byte   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Iterator) Reset()         { *m = Iterator{} }
func (m *Iterator) String() string { return proto.CompactTextString(m) }
func (*Iterator) ProtoMessage()    {}
func (*Iterator) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf10f51bd2cb5547, []int{5}
}

func (m *Iterator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Iterator.Unmarshal(m, b)
}
func (m *Iterator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Iterator.Marshal(b, m, deterministic)
}
func (m *Iterator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Iterator.Merge(m, src)
}
func (m *Iterator) XXX_Size() int {
	return xxx_messageInfo_Iterator.Size(m)
}
func (m *Iterator) XXX_DiscardUnknown() {
	xxx_messageInfo_Iterator.DiscardUnknown(m)
}

var xxx_messageInfo_Iterator proto.InternalMessageInfo

func (m *Iterator) GetDomain() *Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *Iterator) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Iterator) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Iterator) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Stats struct {
	Data                 map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeAt               int64             `protobuf:"varint,2,opt,name=time_at,json=timeAt,proto3" json:"time_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf10f51bd2cb5547, []int{6}
}

func (m *Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stats.Unmarshal(m, b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return xxx_messageInfo_Stats.Size(m)
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Stats) GetTimeAt() int64 {
	if m != nil {
		return m.TimeAt
	}
	return 0
}

type Init struct {
	Type                 string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Dir                  string   `protobuf:"bytes,3,opt,name=Dir,proto3" json:"Dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Init) Reset()         { *m = Init{} }
func (m *Init) String() string { return proto.CompactTextString(m) }
func (*Init) ProtoMessage()    {}
func (*Init) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf10f51bd2cb5547, []int{7}
}

func (m *Init) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Init.Unmarshal(m, b)
}
func (m *Init) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Init.Marshal(b, m, deterministic)
}
func (m *Init) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Init.Merge(m, src)
}
func (m *Init) XXX_Size() int {
	return xxx_messageInfo_Init.Size(m)
}
func (m *Init) XXX_DiscardUnknown() {
	xxx_messageInfo_Init.DiscardUnknown(m)
}

var xxx_messageInfo_Init proto.InternalMessageInfo

func (m *Init) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Init) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Init) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func init() {
	proto.RegisterEnum("protodb.Operation_Type", Operation_Type_name, Operation_Type_value)
	proto.RegisterType((*Batch)(nil), "protodb.Batch")
	proto.RegisterType((*Operation)(nil), "protodb.Operation")
	proto.RegisterType((*Entity)(nil), "protodb.Entity")
	proto.RegisterType((*Nothing)(nil), "protodb.Nothing")
	proto.RegisterType((*Domain)(nil), "protodb.Domain")
	proto.RegisterType((*Iterator)(nil), "protodb.Iterator")
	proto.RegisterType((*Stats)(nil), "protodb.Stats")
	proto.RegisterMapType((map[string]string)(nil), "protodb.Stats.DataEntry")
	proto.RegisterType((*Init)(nil), "protodb.Init")
}

func init() {
	proto.RegisterFile("defs.proto", fileDescriptor_bf10f51bd2cb5547)
}

var fileDescriptor_bf10f51bd2cb5547 = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xcd, 0xda, 0x8e, 0x13, 0x4f, 0x7f, 0xbf, 0x34, 0xac, 0x10, 0xb5, 0x8a, 0x90, 0xa2, 0x15,
	0x12, 0xa6, 0x40, 0x14, 0x52, 0x24, 0xfe, 0x48, 0x48, 0xb4, 0x4a, 0x0e, 0x95, 0x50, 0x91, 0x36,
	0x95, 0x38, 0xa2, 0x6d, 0x3d, 0x34, 0x2b, 0x1a, 0x3b, 0xac, 0x87, 0x8a, 0x5c, 0xb8, 0xf2, 0x79,
	0xf8, 0x7a, 0x9c, 0xd0, 0xae, 0x1d, 0x87, 0x36, 0x39, 0x84, 0x53, 0x76, 0x66, 0xde, 0x7b, 0xb3,
	0xf3, 0x32, 0x5e, 0x80, 0x14, 0x3f, 0x17, 0xfd, 0xb9, 0xc9, 0x29, 0xe7, 0x2d, 0xf7, 0x93, 0x9e,
	0x8b, 0xb7, 0xd0, 0x3c, 0x56, 0x74, 0x31, 0xe5, 0x1d, 0xf0, 0x74, 0x1a, 0xb3, 0x1e, 0x4b, 0x9a,
	0xd2, 0xd3, 0x29, 0x7f, 0x08, 0x7e, 0x3e, 0x2f, 0x62, 0xaf, 0xe7, 0x27, 0x3b, 0x43, 0xde, 0xaf,
	0xf0, 0xfd, 0x0f, 0x73, 0x34, 0x8a, 0x74, 0x9e, 0x49, 0x5b, 0x16, 0x3f, 0x20, 0xaa, 0x33, 0xfc,
	0x11, 0x84, 0x98, 0x91, 0xa6, 0x85, 0x93, 0xd9, 0x19, 0xee, 0xd6, 0xac, 0xb1, 0x4b, 0xcb, 0xaa,
	0xcc, 0x9f, 0x40, 0x40, 0x8b, 0x39, 0xc6, 0x5e, 0x8f, 0x25, 0x9d, 0xe1, 0xde, 0xba, 0x78, 0xff,
	0x6c, 0x31, 0x47, 0xe9, 0x40, 0xe2, 0x3e, 0x04, 0x36, 0xe2, 0x2d, 0xf0, 0x27, 0xe3, 0xb3, 0x6e,
	0x83, 0x03, 0x84, 0xa3, 0xf1, 0xfb, 0xf1, 0xd9, 0xb8, 0xcb, 0xc4, 0x2f, 0x06, 0x61, 0x29, 0xbe,
	0x36, 0x40, 0x17, 0xfc, 0x2f, 0xb8, 0x70, 0x3d, 0xfe, 0x93, 0xf6, 0xc8, 0xef, 0x42, 0xf3, 0x5a,
	0x5d, 0x7d, 0xc3, 0xd8, 0x77, 0xb9, 0x32, 0xe0, 0xf7, 0x20, 0xc4, 0xef, 0xba, 0xa0, 0x22, 0x0e,
	0x7a, 0x2c, 0x69, 0xcb, 0x2a, 0xb2, 0xe8, 0x82, 0x94, 0xa1, 0xb8, 0x59, 0xa2, 0x5d, 0x60, 0x55,
	0x31, 0x4b, 0xe3, 0xb0, 0x54, 0xc5, 0xcc, 0xf5, 0x41, 0x63, 0xe2, 0x56, 0x8f, 0x25, 0x91, 0xb4,
	0x47, 0xfe, 0x00, 0xe0, 0xc2, 0xa0, 0x22, 0x4c, 0x3f, 0x29, 0x8a, 0xdb, 0x3d, 0x96, 0xf8, 0x32,
	0xaa, 0x32, 0x47, 0x24, 0x22, 0x68, 0x9d, 0xe6, 0x34, 0xd5, 0xd9, 0xa5, 0x18, 0x40, 0x38, 0xca,
	0x67, 0x4a, 0x67, 0xab, 0x6e, 0x6c, 0x43, 0x37, 0xaf, 0xee, 0x26, 0xbe, 0x42, 0xfb, 0x84, 0xac,
	0x4b, 0xb9, 0xb1, 0x7e, 0xa7, 0x8e, 0xbd, 0xe6, 0x77, 0x29, 0x2a, 0xab, 0x72, 0x35, 0xb8, 0x2e,
	0x85, 0xda, 0xb2, 0x0c, 0x96, 0x06, 0xf9, 0x1b, 0x0c, 0x0a, 0xfe, 0x32, 0x48, 0xfc, 0x64, 0xd0,
	0x9c, 0x90, 0xa2, 0x82, 0x3f, 0x85, 0x20, 0x55, 0xa4, 0x62, 0xe6, 0x96, 0x22, 0xae, 0xdb, 0xb9,
	0x6a, 0x7f, 0xa4, 0x48, 0x8d, 0x33, 0x32, 0x0b, 0xe9, 0x50, 0x7c, 0x0f, 0x5a, 0xa4, 0x67, 0x68,
	0x3d, 0xf0, 0x9c, 0x07, 0xa1, 0x0d, 0x8f, 0x68, 0xff, 0x25, 0x44, 0x35, 0x76, 0x79, 0x0b, 0x56,
	0xda, 0x77, 0xe3, 0x16, 0x9e, 0xcb, 0x95, 0xc1, 0x1b, 0xef, 0x15, 0x13, 0xef, 0x20, 0x38, 0xc9,
	0x34, 0x71, 0x5e, 0xae, 0x44, 0x45, 0x2a, 0xd7, 0x83, 0x43, 0x70, 0xaa, 0x66, 0x4b, 0x92, 0x3b,
	0x5b, 0xed, 0x91, 0x36, 0x6e, 0xc2, 0x48, 0xda, 0xe3, 0xf0, 0x77, 0x00, 0xde, 0xe8, 0x98, 0x27,
	0x10, 0x68, 0x2b, 0xf4, 0x7f, 0x3d, 0x82, 0xd5, 0xdd, 0xbf, 0xbd, 0xb0, 0xa2, 0xc1, 0x1f, 0x83,
	0x7f, 0x89, 0xc4, 0x6f, 0x57, 0x36, 0x41, 0x0f, 0x21, 0xba, 0x44, 0x9a, 0x90, 0x41, 0x35, 0xdb,
	0x86, 0x90, 0xb0, 0x01, 0xb3, 0xfa, 0x53, 0x55, 0x6c, 0xa5, 0x7f, 0x00, 0x7e, 0xb1, 0xe9, 0x2a,
	0xdd, 0x3a, 0xb1, 0x5c, 0xab, 0x06, 0xef, 0x43, 0xab, 0x40, 0x9a, 0x2c, 0xb2, 0x8b, 0xed, 0xf0,
	0xcf, 0x20, 0x4c, 0xf1, 0x0a, 0x09, 0xb7, 0x83, 0x3f, 0xb7, 0x8f, 0x89, 0x85, 0x6f, 0xdf, 0x61,
	0x08, 0x6d, 0xbd, 0x5c, 0xdc, 0x35, 0xc2, 0x9d, 0xd5, 0xff, 0x50, 0x61, 0x44, 0x63, 0xc0, 0xf8,
	0x6b, 0xd8, 0x35, 0x78, 0x8d, 0xa6, 0xc0, 0x93, 0x7f, 0xa5, 0x1e, 0xb8, 0xef, 0x89, 0x36, 0x38,
	0xdb, 0xb9, 0xb9, 0xb6, 0xa2, 0xc1, 0x07, 0x00, 0xe7, 0xf6, 0x0d, 0xfc, 0x68, 0x34, 0x21, 0x5f,
	0xd5, 0xdd, 0xc3, 0xb8, 0x71, 0x98, 0x17, 0xd0, 0x59, 0x31, 0x9c, 0x07, 0x5b, 0xb0, 0xce, 0x43,
	0x97, 0x3a, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x5f, 0xc9, 0x50, 0x89, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DBClient is the client API for DB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DBClient interface {
	Init(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Entity, error)
	Get(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	GetStream(ctx context.Context, opts ...grpc.CallOption) (DB_GetStreamClient, error)
	Has(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	Set(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error)
	SetSync(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error)
	Delete(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error)
	DeleteSync(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error)
	Iterator(ctx context.Context, in *Entity, opts ...grpc.CallOption) (DB_IteratorClient, error)
	ReverseIterator(ctx context.Context, in *Entity, opts ...grpc.CallOption) (DB_ReverseIteratorClient, error)
	Stats(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Stats, error)
	BatchWrite(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Nothing, error)
	BatchWriteSync(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Nothing, error)
}

type dBClient struct {
	cc grpc.ClientConnInterface
}

func NewDBClient(cc grpc.ClientConnInterface) DBClient {
	return &dBClient{cc}
}

func (c *dBClient) Init(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/protodb.DB/init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Get(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/protodb.DB/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) GetStream(ctx context.Context, opts ...grpc.CallOption) (DB_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DB_serviceDesc.Streams[0], "/protodb.DB/getStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBGetStreamClient{stream}
	return x, nil
}

type DB_GetStreamClient interface {
	Send(*Entity) error
	Recv() (*Entity, error)
	grpc.ClientStream
}

type dBGetStreamClient struct {
	grpc.ClientStream
}

func (x *dBGetStreamClient) Send(m *Entity) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dBGetStreamClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBClient) Has(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/protodb.DB/has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Set(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protodb.DB/set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) SetSync(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protodb.DB/setSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Delete(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protodb.DB/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) DeleteSync(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protodb.DB/deleteSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Iterator(ctx context.Context, in *Entity, opts ...grpc.CallOption) (DB_IteratorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DB_serviceDesc.Streams[1], "/protodb.DB/iterator", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBIteratorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DB_IteratorClient interface {
	Recv() (*Iterator, error)
	grpc.ClientStream
}

type dBIteratorClient struct {
	grpc.ClientStream
}

func (x *dBIteratorClient) Recv() (*Iterator, error) {
	m := new(Iterator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBClient) ReverseIterator(ctx context.Context, in *Entity, opts ...grpc.CallOption) (DB_ReverseIteratorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DB_serviceDesc.Streams[2], "/protodb.DB/reverseIterator", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBReverseIteratorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DB_ReverseIteratorClient interface {
	Recv() (*Iterator, error)
	grpc.ClientStream
}

type dBReverseIteratorClient struct {
	grpc.ClientStream
}

func (x *dBReverseIteratorClient) Recv() (*Iterator, error) {
	m := new(Iterator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBClient) Stats(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/protodb.DB/stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) BatchWrite(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protodb.DB/batchWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) BatchWriteSync(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protodb.DB/batchWriteSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServer is the server API for DB service.
type DBServer interface {
	Init(context.Context, *Init) (*Entity, error)
	Get(context.Context, *Entity) (*Entity, error)
	GetStream(DB_GetStreamServer) error
	Has(context.Context, *Entity) (*Entity, error)
	Set(context.Context, *Entity) (*Nothing, error)
	SetSync(context.Context, *Entity) (*Nothing, error)
	Delete(context.Context, *Entity) (*Nothing, error)
	DeleteSync(context.Context, *Entity) (*Nothing, error)
	Iterator(*Entity, DB_IteratorServer) error
	ReverseIterator(*Entity, DB_ReverseIteratorServer) error
	Stats(context.Context, *Entity) (*Stats, error)
	BatchWrite(context.Context, *Batch) (*Nothing, error)
	BatchWriteSync(context.Context, *Batch) (*Nothing, error)
}

// UnimplementedDBServer can be embedded to have forward compatible implementations.
type UnimplementedDBServer struct {
}

func (*UnimplementedDBServer) Init(ctx context.Context, req *Init) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedDBServer) Get(ctx context.Context, req *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDBServer) GetStream(srv DB_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedDBServer) Has(ctx context.Context, req *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (*UnimplementedDBServer) Set(ctx context.Context, req *Entity) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedDBServer) SetSync(ctx context.Context, req *Entity) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSync not implemented")
}
func (*UnimplementedDBServer) Delete(ctx context.Context, req *Entity) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDBServer) DeleteSync(ctx context.Context, req *Entity) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSync not implemented")
}
func (*UnimplementedDBServer) Iterator(req *Entity, srv DB_IteratorServer) error {
	return status.Errorf(codes.Unimplemented, "method Iterator not implemented")
}
func (*UnimplementedDBServer) ReverseIterator(req *Entity, srv DB_ReverseIteratorServer) error {
	return status.Errorf(codes.Unimplemented, "method ReverseIterator not implemented")
}
func (*UnimplementedDBServer) Stats(ctx context.Context, req *Entity) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedDBServer) BatchWrite(ctx context.Context, req *Batch) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWrite not implemented")
}
func (*UnimplementedDBServer) BatchWriteSync(ctx context.Context, req *Batch) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWriteSync not implemented")
}

func RegisterDBServer(s *grpc.Server, srv DBServer) {
	s.RegisterService(&_DB_serviceDesc, srv)
}

func _DB_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Init)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Init(ctx, req.(*Init))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Get(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DBServer).GetStream(&dBGetStreamServer{stream})
}

type DB_GetStreamServer interface {
	Send(*Entity) error
	Recv() (*Entity, error)
	grpc.ServerStream
}

type dBGetStreamServer struct {
	grpc.ServerStream
}

func (x *dBGetStreamServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dBGetStreamServer) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DB_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Has(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Set(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_SetSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).SetSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/SetSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).SetSync(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Delete(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_DeleteSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).DeleteSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/DeleteSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).DeleteSync(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Iterator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DBServer).Iterator(m, &dBIteratorServer{stream})
}

type DB_IteratorServer interface {
	Send(*Iterator) error
	grpc.ServerStream
}

type dBIteratorServer struct {
	grpc.ServerStream
}

func (x *dBIteratorServer) Send(m *Iterator) error {
	return x.ServerStream.SendMsg(m)
}

func _DB_ReverseIterator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DBServer).ReverseIterator(m, &dBReverseIteratorServer{stream})
}

type DB_ReverseIteratorServer interface {
	Send(*Iterator) error
	grpc.ServerStream
}

type dBReverseIteratorServer struct {
	grpc.ServerStream
}

func (x *dBReverseIteratorServer) Send(m *Iterator) error {
	return x.ServerStream.SendMsg(m)
}

func _DB_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Stats(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_BatchWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).BatchWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/BatchWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).BatchWrite(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_BatchWriteSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).BatchWriteSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.DB/BatchWriteSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).BatchWriteSync(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

var _DB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protodb.DB",
	HandlerType: (*DBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "init",
			Handler:    _DB_Init_Handler,
		},
		{
			MethodName: "get",
			Handler:    _DB_Get_Handler,
		},
		{
			MethodName: "has",
			Handler:    _DB_Has_Handler,
		},
		{
			MethodName: "set",
			Handler:    _DB_Set_Handler,
		},
		{
			MethodName: "setSync",
			Handler:    _DB_SetSync_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _DB_Delete_Handler,
		},
		{
			MethodName: "deleteSync",
			Handler:    _DB_DeleteSync_Handler,
		},
		{
			MethodName: "stats",
			Handler:    _DB_Stats_Handler,
		},
		{
			MethodName: "batchWrite",
			Handler:    _DB_BatchWrite_Handler,
		},
		{
			MethodName: "batchWriteSync",
			Handler:    _DB_BatchWriteSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getStream",
			Handler:       _DB_GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "iterator",
			Handler:       _DB_Iterator_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "reverseIterator",
			Handler:       _DB_ReverseIterator_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "defs.proto",
}
